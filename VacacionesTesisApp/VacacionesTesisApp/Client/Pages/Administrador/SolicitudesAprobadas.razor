@page "/solicitudesaprobadas"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@attribute [Authorize(Roles = "Admin")]
@attribute [Authorize]
@inject HttpClient http
@inject IToastService toast

@if (ListaSolicitudes == null)
{
    <Loader />
}
else if (ListaSolicitudes.Count == 0)
{
    <h3>Solicitudes aprobadas</h3>
    <hr>
    <text>Sin registros...</text>
}
else
{


    <h3>Solicitudes aprobadas</h3>
    <hr>
    <div class="card">

        <div class="card-body" style="overflow-x:auto;">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th scope="col">Datos del empleado</th>
                        <th scope="col">Fecha inicio</th>
                        <th scope="col">Fecha Fin</th>
                        <th scope="col">Descripción</th>
                        <th scope="col">Datos de la solicitud</th>
                        <th scope="col">Estatus</th>
                    </tr>
                </thead>
                <tbody>


                    @foreach (var elemento in ListaSolicitudes)
                    {
                        <tr>

                            <td>
                                <div class="col-12"><strong> @String.Format("Nombre:")</strong>@elemento.Empleado.Nombre</div>
                                <div class="col-12"><strong> @String.Format("Apellido:")</strong>@elemento.Empleado.Apellido</div>
                                <div class="col-12"> <strong>@String.Format("Cédula: ")</strong>@elemento.Empleado.Cedula</div>
                            </td>
                            <td>@elemento.FechaInicio.ToString("dd/MM/yyyy") </td>
                            <td>@elemento.FechaFin.ToString("dd/MM/yyyy")</td>
                            <td>@elemento.Descripcion </td>

                            <td>
                                <div class="col-12"><strong> @String.Format("Dias a tomar:")</strong>@elemento.CantidadDias</div>
                                <div class="col-12"> <strong>@String.Format("Tipo: ")</strong>@elemento.Tipo</div>
                            </td>
                            <td>
                                @elemento.Estatus
                            </td>


                        </tr>

                    }


                </tbody>
            </table>
        </div>

    </div>

}

<AuthorizeView>
    <Authorized>
        <a hidden href="authentication/profile">Hola, @context.User.Identity.Name</a>
        @if (context.User.Identity.Name != null)
        {
            EmailUsuario = @context.User.Identity.Name;
            IdCreador = @context.User.Claims.First(c => c.Type == "sub").Value;
            NombreUsuario = @context.User.Claims.First(c => c.Type == "FullNameUser").Value;
            //   RolUsuario = @context.User.Claims.First(c => c.Type == "role").Value;

        }

    </Authorized>
</AuthorizeView>


@code {

    ModalVer Modal;
    bool editar = false;
    bool Ver = false;
    public Solicitud Solicitud { get; set; } = new Solicitud();
    public List<Solicitud> ListaSolicitudes { get; set; }
    public List<Empleado> ListaEmpleado { get; set; } = new List<Empleado>();
    public Empleado Empleado { get; set; } = new Empleado();
    string EmailUsuario;
    string IdCreador;
    string NombreUsuario;
    string RolUsuario;
    string NombreMostrar;

    public class Estado
    {
        public string Id { get; set; }
        public string Descripcion { get; set; }
    }

    public List<Estado> ListaEstados = new List<Estado>();
    protected override async Task OnInitializedAsync()
    {

        try
        {

            ListaEstados = new List<Estado>()
{
                new Estado {Id="gen123",Descripcion= "Generada"},
                new Estado {Id="gen123",Descripcion= "Aprobada"},
                new Estado {Id="gen123",Descripcion= "Desaprobada"},
            };

            ListaSolicitudes = await http.GetFromJsonAsync<List<Solicitud>>($"api/solicitud/aprobadas");


        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

    }

    void Aprobar(Solicitud solicitud)
    {

        editar = false;
        Ver = false;

        Solicitud = new Solicitud();
        if (solicitud.Estatus == "Generada")
        {

            Solicitud = solicitud;
            Modal.Mostrar();
        }
        else
        {
            Solicitud = solicitud;
            Modal.Mostrar();
        }

    }


    async Task Acciones()
    {






        var repuesta = await http.PutAsJsonAsync("api/solicitud", Solicitud);
        string configuracion = repuesta.StatusCode.ToString();
        if (configuracion.Equals("OK"))
        {
            toast.ShowSuccess("Se actualizo correctamente", "Exito");
            Modal.Ocultar();


        }
        else
        {
            toast.ShowError("Error del sistema", "Error");
        }





    }

    async Task OcultarModal()
    {
        @*if (editar == true)
            {

                ListaSolicitudPermisos = await http.GetFromJsonAsync<List<Solicitud>>($"api/solicitud/SolicitudPermiso/{Empleado.Id}");
                SolicitudPermisos = ListaSolicitudPermisos.First(x => x.Id.Equals(SolicitudPermisos.Id));
            }


            SolicitudPermisos = new Solicitud();*@
        Modal.Ocultar();
    }



}
