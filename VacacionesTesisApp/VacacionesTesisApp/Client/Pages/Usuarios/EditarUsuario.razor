@page "/usuarios/editar/{UserId}"
@inject HttpClient http
@inject IJSRuntime js
@using VacacionesTesisApp.Shared
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@*@attribute [Authorize(Roles = "Admin")]*@
@attribute [Authorize]

@*<h3>Editar rol de usuario</h3>
    <hr />*@

<div class="form-row">
    <div class="col-md-8 col-sm-6 mb-3" align="left">
        <h3>Editar rol</h3>
    </div>
    <div class="col-md-4 col-sm-6 mb-3" align="right">
        <h5>
            <span aria-hidden="true"></span> &nbsp;Fecha: @dateInputValue
        </h5>
    </div>

    <div class="col-md-12 mb-3">
        <div>
            <a href="usuarios" class="float-left" style=" margin-top:8px; margin-bottom: 0px;">Volver a la listas de usuarios</a>
        </div>
    </div>
</div>

<hr />

<div class="row">

    <div class="col-12" style="text-align:center">
        <h4><strong>@usuario.Nombre</strong></h4>
        <h6> @usuario.Email</h6>
        <Text class="text-center"><strong>@usuario.Rol</strong></Text>
    </div>
</div>

<hr />

<div div class="row" style=" text-align:center">

    <div class="col-12" style="margin-top:10px">
        <button class="btn btn-info mb-2 mr-sm-2" @onclick="ReemplazarRol">Asignar Rol</button>
        <button class="btn btn-danger mb-2 mr-sm-2" @onclick="RemoverRol">Remover Rol</button>
    </div>

    <div class="col-12" style="margin-top: 10px; display: flex; align-items:center;justify-content: center;">

        <div class="" style="height:300px">
            <select class="form-control" @bind="rolSeleccionado">
                <option value="0">--Seleccione un rol--</option>
                @foreach (var rol in roles)
                {
                    <option value="@rol.Nombre">@rol.Nombre</option>
                }
            </select>
        </div>

    </div>

</div>



@code {

    public UsuarioModel usuario = new UsuarioModel();
    [Parameter] public string UserId { get; set; }
    private List<RolModel> roles = new List<RolModel>();
    private string rolSeleccionado = "0";

    private string dateInputValue = DateTime.Now.ToString("dd/MM/yyyy");




    protected override async Task OnInitializedAsync()
    {
        var httpResponse = await http.GetFromJsonAsync<List<RolModel>>("api/usuarios/roles");


        usuario = await http.GetFromJsonAsync<UsuarioModel>($"api/usuarios/{UserId}");

        //if (httpResponse.Error)
        //{
        //    await mostrarMensajes.MostrarMensajeError(await httpResponse.GetBody());
        //}
        //else
        //{
        //    roles = httpResponse.Response;
        //}

        roles = httpResponse;

    }

    private async Task AsignarRol()
    {
        await EditarRol("api/usuarios/asignarRol");
    }

    private async Task RemoverRol()
    {
        await EditarRol("api/usuarios/removerRol");

    }

    private async Task ReemplazarRol()
    {
        await EditarRol("api/usuarios/RemplazarRol");
    }

    private async Task EditarRol(string url)
    {
        if (rolSeleccionado == "0")
        {
            await js.MostrarMensaje("Advertencia"
                    , "Debe Seleccionar un Rol", TipoMensajeSweetAler.warning);
            return;
        }

        //var rolDTO = new EditarRolModel() { RoleId = rolSeleccionado, UserId = UserId };

        var rolDTO = new EditarRolModel() { UserId = usuario.UserId, RoleId = usuario.Rol, RoleNuevoId = rolSeleccionado };

        var httpResponse = await http.PostAsJsonAsync<EditarRolModel>(url, rolDTO);

        if (httpResponse.Equals("Conflict"))
        {
            await js.MostrarMensaje("Error"
                    , "Se presentó un error, notificar a sistemas", TipoMensajeSweetAler.error);

        }
        else
        {
            await js.MostrarMensaje("Operación realizada", "Se asigno el Rol", TipoMensajeSweetAler.success);
            await OnInitializedAsync();
        }

    }

}
