@inject IJSRuntime js
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@attribute [Authorize(Roles = "Admin")]
@attribute [Authorize]
@inject NavigationManager navigation
@inject HttpClient http
@inject IToastService toast
@using Blazorise.DataGrid
@page "/empleados"

@if (ListaEmpleado == null)
{
    <Loader />
}
else if (ListaEmpleado.Count == 0)
{


    <nav class="navbar navbar-light bg-light">
        <div class="col-md-6">
            <h5>
                <span class="oi oi-briefcase" aria-hidden="true"></span>
                &nbsp;Empleados
            </h5>
        </div>
        <div class="col-md-6" align="right">
            <h5>
                <span aria-hidden="true"></span> &nbsp;Fecha: @dateInputValue
            </h5>
        </div>
    </nav>
    <br />

    <div class="form-row">
        <div class="col-md-9 mb-3" align="right">
            <TextEdit @bind-Text="@customFilterValue" Placeholder="Buscar nombre..." />
        </div>
        <div class="col-md-3 mb-3" align="right">
            <button type="button" class="btn btn-info" style="background-color:#738b95 !important" @onclick="MostrarModal">Crear nuevo empleado</button>
        </div>
    </div>
    <br />
    <hr />
    <text>Sin registros...</text>


}
else
{

    <nav class="navbar navbar-light bg-light">
        <div class="col-md-6">
            <h5>
                <span class="oi oi-briefcase" aria-hidden="true"></span>
                &nbsp;Empleados
            </h5>
        </div>
        <div class="col-md-6" align="right">
            <h5>
                <span aria-hidden="true"></span> &nbsp;Fecha: @dateInputValue
            </h5>
        </div>
    </nav>
    <br />
    <div class="form-row">
        <div class="col-md-9 mb-3" align="right">
            <TextEdit @bind-Text="@customFilterValue" Placeholder="Buscar nombre..." />
        </div>
        <div class="col-md-3 mb-3" align="right">
            <button type="button" class="btn btn-info" style="background-color:#738b95 !important" @onclick="MostrarModal">Crear nuevo empleado</button>
        </div>
    </div>
    <br />

    <DataGrid TItem="Empleado" Data="ListaEmpleado" CustomFilter="@OnCustomFilter"
              ShowPager="true" PageSize="5" SelectedRowStyling="@OnSelectedRowStyling"
              Striped="true" Responsive="true" Editable="true">


        <ChildContent>

            <DataGridColumn TItem="Empleado" Field="@nameof(Empleado.Nombre)"
                            Caption="Nombre"></DataGridColumn>
            <DataGridColumn TItem="Empleado" Field="@nameof(Empleado.Apellido)"
                            Caption="Apellido"></DataGridColumn>
            <DataGridColumn TItem="Empleado" Field="@nameof(Empleado.Cedula)"
                            Caption="Cedula"></DataGridColumn>
            <DataGridColumn TItem="Empleado" DisplayFormat="{0:dd/MM/yyyy}" Field="@nameof(Empleado.FechaIngreso)"
                            Caption="Fecha de ingreso"></DataGridColumn>
            <DataGridColumn TItem="Empleado" Field="@nameof(Empleado.DiasDisponibles)"
                            Caption="Días disponibles"></DataGridColumn>



            <DataGridCommandColumn TItem="Empleado">
                <DeleteCommandTemplate>

                </DeleteCommandTemplate>
                <EditCommandTemplate>
                    <Button style="color:#ffff;" class="oi oi-pencil btn btn-success"
                            @onclick="@(() => MostrarModalEditar(context.Item))" />
                    <Button style="color:#ffff;" class="oi oi-eye btn btn-info" title="Ver"
                            @onclick="@(() => MostrarModalVer(context.Item))" />
                    <Button title="Historial" class="oi oi-clipboard btn btn-primary"
                            @onclick="@(() => VerHistorial(context.Item))" />

                   @* <a style="color:#ffff;" class="oi oi-pencil btn btn-success" title="Editar" @onclick="(()=>MostrarModalEditar(elemento))"></a> |
                    <a style="color:#ffff;" class="oi oi-eye btn btn-info" title="Ver" @onclick="(()=>MostrarModalVer(elemento))"></a> |
                    <a title="Historial"><span class="oi oi-clipboard btn btn-primary" @onclick="(() => VerHistorial (elemento))" /></a>*@
                </EditCommandTemplate>
                <NewCommandTemplate></NewCommandTemplate>
            </DataGridCommandColumn>
        </ChildContent>





        <PreviousPageButtonTemplate>
            <StringEnBotones TipoBoton="atras" />
        </PreviousPageButtonTemplate>
        <NextPageButtonTemplate>
            <StringEnBotones TipoBoton="siguiente" />
        </NextPageButtonTemplate>
        <FirstPageButtonTemplate>
            <StringEnBotones TipoBoton="primero" />
        </FirstPageButtonTemplate>
        <LastPageButtonTemplate>
            <StringEnBotones TipoBoton="ultimo" />
        </LastPageButtonTemplate>



    </DataGrid>

}


<ModalVer @ref="Modal" Titulo="@Titulo" onCancel="OcultarModal">
    <EditForm Model="@EmpleadoItem" id="ModalCuenta" class="px-4">
        <DataAnnotationsValidator />
        @if (Ver == true)
        {
            <div class="row">
                <div class="col-md-6 mb-3">
                    <div class="form-group">
                        <label>Nombre: </label>
                        <div>
                            <input class="form-control" type="text" @bind-value="EmpleadoItem.Nombre" placeholder="Nombre" disabled />
                        </div>
                    </div>
                    <ValidationMessage For="@(() => EmpleadoItem.Nombre)" />
                </div>
                <div class="col-md-6 mb-3">
                    <div class="form-group">
                        <label>Apellido: </label>
                        <div>
                            <input class="form-control" type="text" @bind-value="EmpleadoItem.Apellido" placeholder="Apellido" disabled />
                        </div>
                    </div>
                </div>
                <ValidationMessage For="@(() => EmpleadoItem.Apellido)" />
            </div>
            <div class="row">
                <div class="col-md-6 mb-3">
                    <div class="form-group">
                        <label>Cedula: </label>
                        <div>
                            <input class="form-control" type="text" @bind-value="EmpleadoItem.Cedula" placeholder="Cedula" disabled />
                        </div>
                    </div>
                    <ValidationMessage For="@(() => EmpleadoItem.Cedula)" />
                </div>
                <div class="col-md-6 mb-3">
                    <div class="form-group">
                        <label>Cargo: </label>
                        @if (EmpleadoItem.Cargo != null)
                        {

                            <input class="form-control" type="text" @bind-value="EmpleadoItem.Cargo.Descripcion" disabled />
                        }
                        else
                        {
                            <input class="form-control" type="text" @bind-value="@Sindato" disabled />
                        }
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-6 mb-3">
                    <div class="form-group">
                        <label>Fecha nacimiento: </label>
                        <div>
                            <input class="form-control" type="date" @bind-value="EmpleadoItem.FechaNacimiento" disabled />
                        </div>
                    </div>
                </div>
                <div class="col-md-6 mb-3">
                    <div class="form-group">
                        <label>Fecha de ingreso: </label>
                        <div>
                            <input class="form-control" type="date" @bind-value="EmpleadoItem.FechaIngreso" disabled />
                        </div>
                    </div>
                </div>
            </div>


            <div class="row">
                <div class="col-md-6 mb-3">
                    <div class="form-group">
                        <label>Dias disponibles: </label>
                        <div>
                            <input class="form-control" type="text" @bind-value="EmpleadoItem.DiasDisponibles" disabled />
                        </div>
                    </div>
                </div>
                <ValidationMessage For="@(() => EmpleadoItem.Cedula)" />
                <div class="col-md-6 mb-3">
                    <div class="form-group">
                        <label>Usuario: </label>
                        <input class="form-control" type="text" @bind-value="EmpleadoItem.NombreUsuario" disabled />
                    </div>
                </div>
            </div>
        }
        else
        {<div class="row">
                <div class="col-md-6 mb-3">
                    <div class="form-group">
                        <label>Nombre: </label>
                        <div>
                            <input class="form-control" type="text" @bind-value="EmpleadoItem.Nombre" placeholder="Nombre" />
                        </div>
                    </div>
                    <ValidationMessage For="@(() => EmpleadoItem.Nombre)" />
                </div>
                <div class="col-md-6 mb-3">
                    <div class="form-group">
                        <label>Apellido: </label>
                        <div>
                            <input class="form-control" type="text" @bind-value="EmpleadoItem.Apellido" placeholder="Apellido" />
                        </div>
                    </div>
                    <ValidationMessage For="@(() => EmpleadoItem.Apellido)" />
                </div>
            </div>
            <div class="row">
                <div class="col-md-6 mb-3">
                    <div class="form-group">
                        <label>Cedula: </label>
                        <div>
                            <input class="form-control" type="text" @bind-value="EmpleadoItem.Cedula" placeholder="Cedula" />
                        </div>
                    </div>
                    <ValidationMessage For="@(() => EmpleadoItem.Cedula)" />
                </div>
                <div class="col-md-6 mb-3">
                    <div class="form-group">
                        <label>Cargo: </label>
                        <select class="form-control dropdown" @bind="@EmpleadoItem.CargoId" required>
                            <option>--Seleccione--</option>

                            @foreach (var item in ListaCargos)
                            {
                                <option value="@item.Id">@item.Descripcion</option>
                            }

                        </select>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-6 mb-3">
                    <div class="form-group">
                        <label>Fecha nacimiento: </label>
                        <div>
                            <input class="form-control" type="date" @bind-value="EmpleadoItem.FechaNacimiento" />
                        </div>
                    </div>
                    <ValidationMessage For="@(() => EmpleadoItem.FechaNacimiento)" />
                </div>
                <div class="col-md-6 mb-3">
                    <div class="form-group">
                        <label>Fecha de ingreso: </label>
                        <div>
                            <input class="form-control" type="date" @bind-value="EmpleadoItem.FechaIngreso" />
                        </div>
                    </div>
                    <ValidationMessage For="@(() => EmpleadoItem.FechaIngreso)" />
                </div>
            </div>


            <div class="row">
                <div class="col-md-6 mb-3">
                    <div class="form-group">
                        <label>Dias disponibles: </label>
                        <div>
                            <input class="form-control" type="text" @bind-value="EmpleadoItem.DiasDisponibles" />
                        </div>
                    </div>
                    <ValidationMessage For="@(() => EmpleadoItem.DiasDisponibles)" />
                </div>
                <div class="col-md-6 mb-3">
                    <div class="form-group">
                        <label>Usuarios: </label>
                        <select class="form-control dropdown" @bind="@EmpleadoItem.NombreUsuario" required>
                            <option>--Seleccione--</option>

                            @foreach (var item in ListaUser)
                            {
                                <option value="@item.Nombre">@item.Nombre</option>
                            }

                        </select>
                    </div>
                </div>
            </div>


            <div class="mb-2 pb-2">
                <button class="btn btn-success" @onclick="(() => Acciones())">@ButtonGuardar</button>
                <button class="btn btn-info" @onclick="(() => OcultarModal())">@ButtonCancelar</button>
            </div>


        }

    </EditForm>

</ModalVer>

<AuthorizeView>
    <Authorized>
        <a hidden href="authentication/profile">Hola, @context.User.Identity.Name</a>
        @if (context.User.Identity.Name != null)
        {
            EmailUsuario = @context.User.Identity.Name;
            Console.WriteLine(EmailUsuario);
            IdCreador = @context.User.Claims.First(c => c.Type == "sub").Value;
            Console.WriteLine(IdCreador);
            NombreUsuario = @context.User.Claims.First(c => c.Type == "FullNameUser").Value;
            Console.WriteLine(NombreUsuario);
            // RolUsuario = @context.User.Claims.First(c => c.Type == "role").Value;

        }

    </Authorized>
</AuthorizeView>


@code {
    ModalVer Modal;
    bool editar = false;
    bool Ver = false;
    public Empleado EmpleadoItem { get; set; } = new Empleado();
    public List<Empleado> ListaEmpleado { get; set; }
    public List<Empleado> ListaEmpleadoCargar { get; set; }
    public List<Cargo> ListaCargos { get; set; } = new List<Cargo>();
    public List<UsuarioModel> ListaUser { get; set; } = new List<UsuarioModel>();
    public List<RolModel> ListaRoles { get; set; } = new List<RolModel>();

    string Titulo;
    string Sindato = "Sin cargo asignado";
    string EmailUsuario;
    string IdCreador;
    string NombreUsuario = "";
    string RolUsuario;

    string ButtonGuardar = "Guardar";
    string ButtonCancelar = "Cancelar";

    private string dateInputValue;
    string customFilterValue;

    protected override async Task OnInitializedAsync()
    {
        //ListaEmpleado = await http.GetFromJsonAsync<List<Empleado>>("api/empleados");
        try
        {
            dateInputValue = DateTime.Now.ToString("dd/MM/yyyy");
            ListaRoles = await http.GetFromJsonAsync<List<RolModel>>("api/usuarios/roles");
            ListaUser = await http.GetFromJsonAsync<List<UsuarioModel>>("api/usuarios");
            ListaCargos = await http.GetFromJsonAsync<List<Cargo>>("api/cargos");
            ListaEmpleado = await http.GetFromJsonAsync<List<Empleado>>("api/empleados");


        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        @*        List<Cargo> ListaC = new List<Cargo>()
            {
                new Cargo{ Id="1",Descripcion="Gerente"},
                new Cargo{ Id="2",Descripcion="Director"}

            };
            ListaCargos = ListaC;*@

    }
    async Task OcultarModal()
    {
        if (editar == true)
        {

            ListaEmpleado = await http.GetFromJsonAsync<List<Empleado>>($"api/empleados");
            EmpleadoItem = ListaEmpleado.First(x => x.Id.Equals(EmpleadoItem.Id));
        }


        EmpleadoItem = new Empleado();
        Modal.Ocultar();
    }

    void MostrarModal()
    {
        editar = false;
        Titulo = "Crear empleado";
        Ver = false;
        EmpleadoItem = new Empleado();
        Modal.Mostrar();


    }
    void MostrarModalEditar(Empleado empleado)
    {
        editar = true;
        Titulo = "Editar empleado";
        Ver = false;
        EmpleadoItem = empleado;
        Modal.Mostrar();
    }
    void MostrarModalVer(Empleado empleado)
    {
        Ver = true;
        Titulo = "Ver empleado";
        EmpleadoItem = empleado;
        Modal.Mostrar();
    }



    void VerHistorial(Empleado empleado)
    {
        navigation.NavigateTo($"empleado/historialempleado/{empleado.Id}");
    }

    async Task Acciones()
    {

        if (EmpleadoItem.Id == null)
        {
            var respuestas = await http.PostAsJsonAsync("api/empleados", EmpleadoItem);

            string configuracion = respuestas.StatusCode.ToString();

            if (configuracion.Equals("OK"))
            {
                toast.ShowSuccess("Se creo correctamente", "Exito");
                ListaEmpleado = await http.GetFromJsonAsync<List<Empleado>>($"api/empleados");
                EmpleadoItem = new Empleado();
                Modal.Ocultar();
            }
        }
        else
        {
            var repuesta = await http.PutAsJsonAsync("api/empleados", EmpleadoItem);
            string configuracion = repuesta.StatusCode.ToString();
            if (configuracion.Equals("OK"))
            {
                toast.ShowSuccess("Se actualizo correctamente", "Exito");
                ListaEmpleado = await http.GetFromJsonAsync<List<Empleado>>($"api/empleados");
                EmpleadoItem = new Empleado();
                Modal.Ocultar();
            }
        }

    }


    bool OnCustomFilter(Empleado model)
    {
        if (string.IsNullOrEmpty(customFilterValue))
            return true;

        return
            model.Nombre?.Contains(customFilterValue, StringComparison.OrdinalIgnoreCase) == true
            || model.Apellido?.Contains(customFilterValue, StringComparison.OrdinalIgnoreCase) == true;
    }

    void OnSelectedRowStyling(Empleado empleado, DataGridRowStyling styling)
    {
        styling.Background = Background.Info;
    }


    bool OnCustomFilter(Solicitud model)
    {
        if (string.IsNullOrEmpty(customFilterValue))
            return true;

        return
            model.Estatus?.Contains(customFilterValue, StringComparison.OrdinalIgnoreCase) == true
            || model.Empleado.Nombre?.Contains(customFilterValue, StringComparison.OrdinalIgnoreCase) == true;
    }

    void OnSelectedRowStyling(Solicitud solicitud, DataGridRowStyling styling)
    {
        styling.Background = Background.Info;
    }

}


