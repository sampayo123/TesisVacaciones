@page "/empleado/historialempleado/{Id}"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@attribute [Authorize]
@inject HttpClient http
@inject IToastService toast
@using Blazorise.DataGrid

<h3>Historial Empleado</h3>

@if (ListaSolicitudesObtener == null)
{
    <Loader />
}
else if (ListaSolicitudesObtener.Count == 0)
{
    <nav class="navbar navbar-light bg-light">
        <div class="col-md-6">
            <h5>
                <span class="oi oi-briefcase" aria-hidden="true"></span>
                &nbsp;Historial Empleado
            </h5>
        </div>
        <div class="col-md-6" align="right">
            <h5>
                <span aria-hidden="true"></span> &nbsp;Fecha: @dateInputValue
            </h5>
        </div>
    </nav>
    <br />

    <div class="form-row">
        <div class="col-md-10 mb-3" align="right">
            <TextEdit @bind-Text="@customFilterValue" Placeholder="Buscar nombre..." />
        </div>
    </div>
    <br />
    <hr />
    <text>Sin registros...</text>
}
else
{

    <nav class="navbar navbar-light bg-light">
        <div class="col-md-6">
            <h5>
                <span class="oi oi-briefcase" aria-hidden="true"></span>
                &nbsp;Historial Empleado
            </h5>
        </div>
        <div class="col-md-6" align="right">
            <h5>
                <span aria-hidden="true"></span> &nbsp;Fecha: @dateInputValue
            </h5>
        </div>
    </nav>
    <br />

    <div class="form-row">
        <div class="col-md-10 mb-3" align="right">
            <TextEdit @bind-Text="@customFilterValue" Placeholder="Buscar nombre..." />
        </div>
    </div>
    <br />


    <DataGrid TItem="Solicitud" Data="ListaSolicitudes" CustomFilter="@OnCustomFilter"
              ShowPager="true" PageSize="5" SelectedRowStyling="@OnSelectedRowStyling"
              Striped="true" Responsive="true" Editable="true">


        <ChildContent>

            <DataGridColumn TItem="Solicitud" Field="@nameof(Solicitud.CantidadDias)" Caption="Datos del empleado">
                <DisplayTemplate>

                    <div class="col-12"><strong> @String.Format("Nombre:")</strong>@context.EmpleadoNombre</div>
                    <div class="col-12"><strong> @String.Format("Apellido:")</strong>@context.EmpleadoApellido</div>
                    <div class="col-12"> <strong>@String.Format("Cédula: ")</strong>@context.EmpleadoCedula</div>

                </DisplayTemplate>
            </DataGridColumn>

            <DataGridColumn TItem="Solicitud" DisplayFormat="{0:dd/MM/yyyy}" Field="@nameof(Solicitud.FechaInicio)"
                            Caption="Fecha Inicio"></DataGridColumn>
            <DataGridColumn TItem="Solicitud" DisplayFormat="{0:dd/MM/yyyy}" Field="@nameof(Solicitud.FechaFin)"
                            Caption="Fecha fin"></DataGridColumn>
            <DataGridColumn TItem="Solicitud" Field="@nameof(Solicitud.Descripcion)"
                            Caption="Descripción"></DataGridColumn>

            <DataGridColumn TItem="Solicitud" Field="@nameof(Solicitud.CantidadDias)" Caption="Datos de la solicitud">
                <DisplayTemplate>

                    <div class="col-12"><strong> @String.Format("Dias a tomar:")</strong>@context.CantidadDias</div>
                    <div class="col-12"> <strong>@String.Format("Tipo: ")</strong>@context.Tipo</div>

                </DisplayTemplate>
            </DataGridColumn>
            <DataGridColumn TItem="Solicitud" Field="@nameof(Solicitud.Estatus)"
                            Caption="Estatus"></DataGridColumn>

            <DataGridCommandColumn TItem="Solicitud" Caption="Acciones">
                <DeleteCommandTemplate>

                </DeleteCommandTemplate>
                <EditCommandTemplate>
                    @if (context.Item.Estatus == "Generada")
                    {
                        <Button style="color:#ffff;" class="oi oi-pencil btn btn-success"
                                @onclick="@(() => Aprobar(context.Item))" />
                    }

                    </EditCommandTemplate>
                <NewCommandTemplate></NewCommandTemplate>
            </DataGridCommandColumn>
        </ChildContent>


        <PreviousPageButtonTemplate>
            <StringEnBotones TipoBoton="atras" />
        </PreviousPageButtonTemplate>
        <NextPageButtonTemplate>
            <StringEnBotones TipoBoton="siguiente" />
        </NextPageButtonTemplate>
        <FirstPageButtonTemplate>
            <StringEnBotones TipoBoton="primero" />
        </FirstPageButtonTemplate>
        <LastPageButtonTemplate>
            <StringEnBotones TipoBoton="ultimo" />
        </LastPageButtonTemplate>



    </DataGrid>
}



<ModalVer @ref="Modal" Titulo="Cambiar estatus" onCancel="OcultarModal">
    <EditForm Model="@SolicitudItem">
        <DataAnnotationsValidator />
        <div class="row">
            <div class="col-md-6 mb-3">
                <div class="form-group">
                    <label>Fecha inicio: </label>
                    <div>
                        <input class="form-control" type="date" @bind-value="SolicitudItem.FechaInicio" placeholder="Fecha inicio" disabled />
                    </div>
                </div>
            </div>
            <div class="col-md-6 mb-3">
                <div class="form-group">
                    <label>Fecha fin: </label>
                    <div>
                        <input class="form-control" type="date" @bind-value="SolicitudItem.FechaFin" placeholder="Fecha Fin" disabled />
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12 mb-3">
                <div class="form-group">
                    <label>Descripción: </label>
                    <div>
                        <input class="form-control" type="text" @bind-value="SolicitudItem.Descripcion"
                               placeholder="Descripción" disabled />
                    </div>
                </div>
            </div>

        </div>

        <div class="row">
            <div class="col-md-6 mb-3">
                <div class="form-group">
                    <label>Cantidad de dias: </label>
                    <input class="form-control" type="text" @bind-value="SolicitudItem.CantidadDias" disabled />
                </div>
            </div>
            <div class="col-md-6 mb-3">
                <div class="form-group">
                    <label>Estatus: </label>
                    <div>
                        <select class="form-control" @bind="SolicitudItem.Estatus">
                            <option disabled>Seleccione</option>

                            @foreach (var items in ListaEstados)
                            {
                                <option value="@items.Descripcion">@items.Descripcion</option>
                            }
                        </select>
                        @*              <input class="form-control" type="text" @bind-value="Solicitud.Estatus" disabled />*@
                    </div>
                </div>
            </div>
        </div>


        <div class="mb-2 pb-2">
            <button class="btn btn-success" @onclick="(() => Acciones())">@ButtonGuardar</button>
            <button class="btn btn-info" @onclick="(() => OcultarModal())">@ButtonCancelar</button>
        </div>


    </EditForm>
</ModalVer>

<AuthorizeView>
    <Authorized>
        <a hidden href="authentication/profile">Hola, @context.User.Identity.Name</a>
        @if (context.User.Identity.Name != null)
        {
            EmailUsuario = @context.User.Identity.Name;
            IdCreador = @context.User.Claims.First(c => c.Type == "sub").Value;
            NombreUsuario = @context.User.Claims.First(c => c.Type == "FullNameUser").Value;
            //   RolUsuario = @context.User.Claims.First(c => c.Type == "role").Value;

        }

    </Authorized>
</AuthorizeView>


@code {

    ModalVer Modal;
    [Parameter] public string Id { get; set; }
    bool editar = false;
    bool Ver = false;
    public Solicitud SolicitudItem { get; set; } = new Solicitud();
    public List<Solicitud> ListaSolicitudesObtener { get; set; }
    public List<Solicitud> ListaSolicitudes { get; set; } = new List<Solicitud>();
    public List<Empleado> ListaEmpleado { get; set; } = new List<Empleado>();
    public Empleado Empleado { get; set; } = new Empleado();
    string EmailUsuario;
    string IdCreador;
    string NombreUsuario;
    string RolUsuario;
    string NombreMostrar;
    private string dateInputValue;
    string customFilterValue;

    string ButtonGuardar = "Guardar";
    string ButtonCancelar = "Cancelar";

    public class Estado
    {
        public string Id { get; set; }
        public string Descripcion { get; set; }
    }

    public List<Estado> ListaEstados = new List<Estado>();
    protected override async Task OnInitializedAsync()
    {

        try
        {
            dateInputValue = DateTime.Now.ToString("dd/MM/yyyy");
            ListaEstados = new List<Estado>()
{
                new Estado {Id="gen123",Descripcion= "Generada"},
                new Estado {Id="gen123",Descripcion= "Aprobada"},
                new Estado {Id="gen123",Descripcion= "Desaprobada"},
            };

            ListaSolicitudes = new List<Solicitud>();
            ListaSolicitudesObtener = await http.GetFromJsonAsync<List<Solicitud>>($"api/solicitud/{Id}");
            ListaSolicitudesObtener.ForEach(items =>
            {
                items.EmpleadoNombre = items.Empleado.Nombre;
                items.EmpleadoApellido = items.Empleado.Apellido;
                items.EmpleadoCedula = items.Empleado.Cedula;
                ListaSolicitudes.Add(items);
            });


        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

    }

    void Aprobar(Solicitud solicitud)
    {

        editar = false;
        Ver = false;

        SolicitudItem = new Solicitud();
        if (SolicitudItem.Estatus == "Generada")
        {

            SolicitudItem = solicitud;
            Modal.Mostrar();
        }
        else
        {
            SolicitudItem = solicitud;
            Modal.Mostrar();
        }

    }


    async Task Acciones()
    {

        var repuesta = await http.PutAsJsonAsync("api/solicitud", SolicitudItem);
        string configuracion = repuesta.StatusCode.ToString();
        if (configuracion.Equals("OK"))
        {
            toast.ShowSuccess("Se actualizo correctamente", "Exito");
            Modal.Ocultar();


        }
        else
        {
            toast.ShowError("Error del sistema", "Error");
        }


        await OnInitializedAsync();


    }

    async Task OcultarModal()
    {
        Modal.Ocultar();
        await OnInitializedAsync();
    }

    bool OnCustomFilter(Solicitud model)
    {
        if (string.IsNullOrEmpty(customFilterValue))
            return true;

        return
            model.Estatus?.Contains(customFilterValue, StringComparison.OrdinalIgnoreCase) == true
            || model.Empleado.Nombre?.Contains(customFilterValue, StringComparison.OrdinalIgnoreCase) == true;
    }

    void OnSelectedRowStyling(Solicitud solicitud, DataGridRowStyling styling)
    {
        styling.Background = Background.Info;
    }

}




