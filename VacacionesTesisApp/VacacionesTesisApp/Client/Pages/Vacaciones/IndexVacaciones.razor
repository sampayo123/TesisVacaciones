@page "/vacaciones"
@inject IJSRuntime js
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@attribute [Authorize]
@inject HttpClient http
@inject IToastService toast
@using Blazorise.DataGrid

@if (ListaSolicitudesVacacionesCargar == null)
{
    @if (NoExiste == "")
    {
        <Loader />
    }
    else if (NoExiste == "Noexiste")
    {
        <div class="col-lg-12 col-md-12 col-sm-12 col-12" align="center">
            <div>
                <h5>El personal de gestión humana debe asignar un empleado a este usuario</h5>
            </div>
        </div>
    }
}
else if (ListaSolicitudesVacacionesCargar.Count == 0)
{

    @if (UserCreado)
    {
        <nav class="navbar navbar-light bg-light">
            <div class="col-md-6  mr-0 pl-0">
                <h5>
                    <span class="oi oi-briefcase" aria-hidden="true"></span>
                    &nbsp;Vacaciones
                </h5>
            </div>
            <div class="col-md-6" align="right">
                <h5>
                    <span aria-hidden="true"></span> &nbsp;Fecha: @dateInputValue
                </h5>
            </div>

        </nav>
        <div>
            <label>Días disponibles:</label>
            <div class="col-lg-3 col-md-3 col-sm-3 col-12 mr-0 pl-0">
                <text class="form-control" style="background:#e9ecef"> @Empleado.DiasDisponibles </text>
            </div>
        </div>
    }
    else
    {
        <div class="col-lg-12 col-md-12 col-sm-12 col-12" align="center">
            <div>

                <h5>El personal de gestión humana debe asignar un empleado a este usuario</h5>
            </div>
        </div>

    }
    <br />
    <div class="form-row">
        <div class="col-md-10 mb-3" align="right">
            <TextEdit @bind-Text="@customFilterValue" Placeholder="Buscar nombre..." />
        </div>
        <div class="col-md-2 mb-3">
            <button type="button" class="btn btn-info" style="background-color:#738b95 !important" @onclick="MostrarModal">Crear nuevo solicitud</button>
        </div>
    </div>
    <hr>
    <text>Sin registros...</text>

}
else
{

    @if (UserCreado)
    {
        <nav class="navbar navbar-light bg-light">
            <div class="col-md-6  mr-0 pl-0">
                <h5>
                    <span class="oi oi-briefcase" aria-hidden="true"></span>
                    &nbsp;Vacaciones
                </h5>
            </div>
            <div class="col-md-6" align="right">
                <h5>
                    <span aria-hidden="true"></span> &nbsp;Fecha: @dateInputValue
                </h5>
            </div>

        </nav>
        <div>
            <label>Días disponibles:</label>
            <div class="col-lg-3 col-md-3 col-sm-3 col-12 mr-0 pl-0">
                <text class="form-control" style="background:#e9ecef"> @Empleado.DiasDisponibles </text>
            </div>
        </div>
    }
    else
    {
        <div class="col-lg-12 col-md-12 col-sm-12 col-12" align="center">
            <div>

                <h5>El personal de gestión humana debe asignar un empleado a este usuario</h5>
            </div>
        </div>

    }
    <br />
    <div class="form-row">
        <div class="col-md-10 mb-3" align="right">
            <TextEdit @bind-Text="@customFilterValue" Placeholder="Buscar nombre..." />
        </div>
        <div class="col-md-2 mb-3">
            <button type="button" class="btn btn-info" style="background-color:#738b95 !important" @onclick="MostrarModal">Crear nuevo solicitud</button>
        </div>
    </div>
    <br />

    <DataGrid TItem="Solicitud" Data="ListaSolicitudesVacaciones" CustomFilter="@OnCustomFilter"
              ShowPager="true" PageSize="5" SelectedRowStyling="@OnSelectedRowStyling"
              Striped="true" Responsive="true" Editable="true">


        <ChildContent>

            <DataGridColumn TItem="Solicitud" Field="@nameof(Solicitud.EmpleadoNombre)"
                            Caption="Nombre"></DataGridColumn>
            <DataGridColumn TItem="Solicitud" DisplayFormat="{0:dd/MM/yyyy}" Field="@nameof(Solicitud.FechaInicio)"
                            Caption="Fecha inicio"></DataGridColumn>
            <DataGridColumn TItem="Solicitud" DisplayFormat="{0:dd/MM/yyyy}" Field="@nameof(Solicitud.FechaFin)"
                            Caption="Descripción"></DataGridColumn>
            <DataGridColumn TItem="Solicitud" DisplayFormat="{0:dd/MM/yyyy}" Field="@nameof(Solicitud.Estatus)"
                            Caption="Estatus"></DataGridColumn>
            <DataGridColumn TItem="Solicitud" Field="@nameof(Solicitud.CantidadDias)"
                            Caption="Dias a tomar"></DataGridColumn>



            <DataGridCommandColumn TItem="Solicitud" Caption="Acciones">
                <DeleteCommandTemplate>

                </DeleteCommandTemplate>
                <EditCommandTemplate>

                    @if (context.Item.Estatus == "Generada")
                    {
                        <Button style="color:#ffff;" class="oi oi-pencil btn btn-success"
                                @onclick="@(() => MostrarModalEditar(context.Item))" />
                        <Button style="color:#ffff;" class="oi oi-trash btn btn-danger" title="Eliminar" @onclick="(() => Eliminar(context.Item))" />
                    }
                </EditCommandTemplate>
                <NewCommandTemplate></NewCommandTemplate>
            </DataGridCommandColumn>
        </ChildContent>





        <PreviousPageButtonTemplate>
            <StringEnBotones TipoBoton="atras" />
        </PreviousPageButtonTemplate>
        <NextPageButtonTemplate>
            <StringEnBotones TipoBoton="siguiente" />
        </NextPageButtonTemplate>
        <FirstPageButtonTemplate>
            <StringEnBotones TipoBoton="primero" />
        </FirstPageButtonTemplate>
        <LastPageButtonTemplate>
            <StringEnBotones TipoBoton="ultimo" />
        </LastPageButtonTemplate>



    </DataGrid>



}

<ModalVer @ref="Modal" Titulo="@Titulo" onCancel="OcultarModal">
    <EditForm Model="@SolicitudVacaciones">
        <DataAnnotationsValidator />
        <div class="row">
            <div class="col-md-6 mb-3">
                <div class="form-group">
                    <label>Fecha inicio: </label>
                    <div>
                        <input class="form-control" type="date" @bind-value="SolicitudVacaciones.FechaInicio" placeholder="Fecha inicio" disabled />
                    </div>
                </div>
            </div>
            <div class="col-md-6 mb-3">
                <div class="form-group">
                    <label>Fecha fin: </label>
                    <div>
                        <input class="form-control" type="date" @bind-value="SolicitudVacaciones.FechaFin" placeholder="Fecha Fin" />
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12 mb-3">
                <div class="form-group">
                    <label>Descripción: </label>
                    <div>
                        <input class="form-control" type="text" @bind-value="SolicitudVacaciones.Descripcion"
                               placeholder="Descripción" />
                    </div>
                </div>
                <ValidationMessage For="@(() => SolicitudVacaciones.Descripcion)" />
            </div>
        </div>

        <div class="row">
            <div class="col-md-6 mb-3">
                <div class="form-group">
                    <label>Cantidad de dias: </label>
                    @if (SolicitudVacaciones.FechaInicio != SolicitudVacaciones.FechaFin)
                    {
                        SolicitudVacaciones.CantidadDias = 1;
                        cantidaddias = (SolicitudVacaciones.FechaFin - SolicitudVacaciones.FechaInicio).TotalDays;
                        cantidaddias = cantidaddias + 1;
                        SolicitudVacaciones.CantidadDias = SolicitudVacaciones.CantidadDias + Convert.ToInt32(cantidaddias);
                    }
                    else
                    {
                        SolicitudVacaciones.CantidadDias = 1;
                    }
                    <input class="form-control" type="text" @bind-value="SolicitudVacaciones.CantidadDias" disabled />
                </div>
            </div>
            <div class="col-md-6 mb-3">
                <div class="form-group">
                    <label>Estatus: </label>
                    <div>
                        <input class="form-control" type="text" @bind-value="SolicitudVacaciones.Estatus" disabled />
                    </div>
                </div>
            </div>
        </div>
        <div class="mb-2 pb-2">
            <button class="btn btn-success" @onclick="(() => Acciones())">@ButtonGuardar</button>
            <button class="btn btn-info" @onclick="(() => OcultarModal())">@ButtonCancelar</button>
        </div>

    </EditForm>
</ModalVer>

<AuthorizeView>
    <Authorized>
        <a hidden href="authentication/profile">Hola, @context.User.Identity.Name</a>
        @if (context.User.Identity.Name != null)
        {
            EmailUsuario = @context.User.Identity.Name;
            IdCreador = @context.User.Claims.First(c => c.Type == "sub").Value;
            NombreUsuario = @context.User.Claims.First(c => c.Type == "FullNameUser").Value;
            //   RolUsuario = @context.User.Claims.First(c => c.Type == "role").Value;

        }

    </Authorized>
</AuthorizeView>

@code {

    ModalVer Modal;
    bool editar = false;
    bool Ver = false;
    public Solicitud SolicitudVacaciones { get; set; } = new Solicitud();
    public List<Solicitud> ListaSolicitudesVacaciones { get; set; } = new List<Solicitud>();
    public List<Solicitud> ListaSolicitudesVacacionesCargar { get; set; }
    public List<Empleado> ListaEmpleado { get; set; } = new List<Empleado>();
    public Empleado Empleado { get; set; } = new Empleado();

    string Titulo;
    string EmailUsuario;
    string IdCreador;
    string NombreUsuario;
    string RolUsuario;
    string NombreMostrar;
    int diasguardados;
    string ButtonGuardar = "Guardar";
    string ButtonCancelar = "Cancelar";
    bool UserCreado = false;
    string NoExiste = "";
    private string dateInputValue;
    string customFilterValue;

    Double cantidaddias;

    protected override async Task OnInitializedAsync()
    {
        //ListaEmpleado = await http.GetFromJsonAsync<List<Empleado>>("api/empleados");

        try
        {
            dateInputValue = DateTime.Now.ToString("dd/MM/yyyy");
            ListaEmpleado = await http.GetFromJsonAsync<List<Empleado>>("api/empleados");

            bool existe = ListaEmpleado.Any(x => x.NombreUsuario == NombreUsuario);
            if (existe)
            {
                NoExiste = null;

                UserCreado = true;
                Empleado = ListaEmpleado.First(x => x.NombreUsuario == NombreUsuario);
                ListaSolicitudesVacaciones = new List<Solicitud>();
                ListaSolicitudesVacacionesCargar = await http.GetFromJsonAsync<List<Solicitud>>($"api/solicitud/SolicitudVacaciones/{Empleado.Id}");
                ListaSolicitudesVacacionesCargar.ForEach(items =>
                {


                    items.EmpleadoNombre = items.Empleado.Nombre;
                    ListaSolicitudesVacaciones.Add(items);

                });
            }
            else
            {
                NoExiste = "Noexiste";
            }



        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

    }

    async Task OcultarModal()
    {
        if (editar == true)
        {

            ListaSolicitudesVacaciones = await http.GetFromJsonAsync<List<Solicitud>>($"api/solicitud/SolicitudVacaciones/{Empleado.Id}");
            SolicitudVacaciones = ListaSolicitudesVacaciones.First(x => x.Id.Equals(SolicitudVacaciones.Id));
        }


        SolicitudVacaciones = new Solicitud();
        Modal.Ocultar();
        await OnInitializedAsync();
    }

    void MostrarModal()
    {
        editar = false;
        Ver = false;
        Titulo = "Crear solicitud de vacaciones";
        SolicitudVacaciones = new Solicitud();
        if (SolicitudVacaciones.Id == null)
        {

            SolicitudVacaciones.Estatus = "Generada";
            SolicitudVacaciones.FechaInicio = DateTime.Now;
            SolicitudVacaciones.FechaFin = DateTime.Now;
            Console.WriteLine(cantidaddias);
        }
        Modal.Mostrar();

    }
    void MostrarModalEditar(Solicitud solicitud)
    {
        editar = true;
        Titulo = "Editar solicitud de vacaciones";
        Ver = false;
        SolicitudVacaciones = solicitud;
        Modal.Mostrar();
    }

    async Task Acciones()
    {

        if (SolicitudVacaciones.Id == null)
        {


            if (SolicitudVacaciones.CantidadDias > Empleado.DiasDisponibles || SolicitudVacaciones.FechaFin.Date < SolicitudVacaciones.FechaInicio.Date)
            {

                if (SolicitudVacaciones.FechaFin.Date < SolicitudVacaciones.FechaInicio.Date)
                {
                    toast.ShowInfo("La fecha de fin no puede ser menor a la fecha de de inicio", "Advertencia");
                }

                if (SolicitudVacaciones.CantidadDias > Empleado.DiasDisponibles)
                {

                    toast.ShowInfo("Los dias solicitados no pueden ser mayores a los dias disponibles", "Advertencia");
                }
            }
            else
            {
                SolicitudVacaciones.EmpleadoId = Empleado.Id;
                SolicitudVacaciones.Estatus = "Generada";
                SolicitudVacaciones.Tipo = "Vacaciones";
                var respuestas = await http.PostAsJsonAsync("api/solicitud", SolicitudVacaciones);
                string configuracion = respuestas.StatusCode.ToString();
                if (configuracion.Equals("OK"))
                {
                    toast.ShowSuccess("Se creo correctamente", "Exito");
                    Console.WriteLine("Exito");
                    Empleado.DiasDisponibles = Empleado.DiasDisponibles - SolicitudVacaciones.CantidadDias;
                    await http.PutAsJsonAsync("api/empleados", Empleado);
                    ListaSolicitudesVacaciones = await http.GetFromJsonAsync<List<Solicitud>>($"api/solicitud/SolicitudVacaciones/{Empleado.Id}");
                    SolicitudVacaciones = new Solicitud();
                    Modal.Ocultar();
                }
                else
                {
                }

            }


        }
        else
        {
            if (SolicitudVacaciones.CantidadDias > Empleado.DiasDisponibles || SolicitudVacaciones.FechaFin.Date < SolicitudVacaciones.FechaInicio.Date)
            {

                if (SolicitudVacaciones.FechaFin.Date < SolicitudVacaciones.FechaInicio.Date)
                {
                    toast.ShowInfo("La fecha de fin no puede ser menor a la fecha de de inicio", "Advertencia");
                }

                if (SolicitudVacaciones.CantidadDias > Empleado.DiasDisponibles)
                {

                    toast.ShowInfo("Los dias solicitados no pueden ser mayores a los dias disponibles", "Advertencia");
                }
            }
            else
            {

                ListaSolicitudesVacaciones = await http.GetFromJsonAsync<List<Solicitud>>($"api/solicitud/SolicitudVacaciones/{Empleado.Id}");

                var solicitudAnteriro = ListaSolicitudesVacaciones.Where(x => x.EmpleadoId == Empleado.Id && x.Id == SolicitudVacaciones.Id).FirstOrDefault();
                var cantidadguardad = solicitudAnteriro.CantidadDias;

                var repuesta = await http.PutAsJsonAsync("api/solicitud", SolicitudVacaciones);

                string configuracion = repuesta.StatusCode.ToString();
                if (configuracion.Equals("OK"))
                {
                    toast.ShowSuccess("Se actualizo correctamente", "Exito");


                    if (SolicitudVacaciones.CantidadDias == cantidadguardad)
                    {
                        Empleado.DiasDisponibles = Empleado.DiasDisponibles;
                    }
                    else
                    {
                        Empleado.DiasDisponibles = Empleado.DiasDisponibles + cantidadguardad;
                        Empleado.DiasDisponibles = Empleado.DiasDisponibles - SolicitudVacaciones.CantidadDias;

                        await http.PutAsJsonAsync("api/empleados", Empleado);
                        ListaSolicitudesVacaciones = await http.GetFromJsonAsync<List<Solicitud>>($"api/solicitud/SolicitudVacaciones/{Empleado.Id}");
                    }

                    SolicitudVacaciones = new Solicitud();
                    Modal.Ocultar();
                }
                else
                {

                }
                Console.WriteLine("Editar");

            }
        }
        await actualizar();
        await OnInitializedAsync();
    }
    async Task actualizar()
    {
        ListaSolicitudesVacaciones = await http.GetFromJsonAsync<List<Solicitud>>($"api/solicitud/SolicitudVacaciones/{Empleado.Id}");
        Empleado = await http.GetFromJsonAsync<Empleado>($"api/Empleados/{Empleado.Id}");
        await OnInitializedAsync();
    }

    async Task Eliminar(Solicitud solicitud)
    {
        var result = await js.ConfirmCreateSinAlerta("Aviso", "¿Seguro que quiere eliminar la solicitud?", TipoMensajeSweetAler.warning);
        if (result)
        {
            var empleado = await http.GetFromJsonAsync<Empleado>($"api/Empleados/{Empleado.Id}");

            var respuesta = await http.DeleteAsync($"api/solicitud/{solicitud.Id}");
            string configuracion = respuesta.StatusCode.ToString();

            if (configuracion.Equals("OK"))
            {
                toast.ShowSuccess("Se elimino correctamente", "Exito");
                empleado.DiasDisponibles = empleado.DiasDisponibles + solicitud.CantidadDias;
                await http.PutAsJsonAsync("api/empleados", empleado);
                await actualizar();


            }
        }
        await OnInitializedAsync();
    }

    bool OnCustomFilter(Solicitud model)
    {
        if (string.IsNullOrEmpty(customFilterValue))
            return true;

        return
            model.Estatus?.Contains(customFilterValue, StringComparison.OrdinalIgnoreCase) == true
            || model.Empleado.Nombre?.Contains(customFilterValue, StringComparison.OrdinalIgnoreCase) == true;
    }

    void OnSelectedRowStyling(Solicitud solicitud, DataGridRowStyling styling)
    {
        styling.Background = Background.Info;
    }

}
