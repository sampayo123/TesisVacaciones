@page "/permisos"
@inject IJSRuntime js
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@attribute [Authorize]
@inject HttpClient http
@inject IToastService toast
@using Blazorise.DataGrid
@if (ListaSolicitudPermisosObtener == null)
{
    @if (NoExiste == "")
    {
        <Loader />
    }
    else if (NoExiste == "Noexiste")
    {
        <div class="col-lg-12 col-md-12 col-sm-12 col-12" align="center">
            <div>
                <h5>El personal de gestión humana debe asignar un empleado a este usuario</h5>
            </div>
        </div>
    }
}
else if (ListaSolicitudPermisosObtener.Count == 0)
{

    @if (UserCreado)
    {
        <nav class="navbar navbar-light bg-light">
            <div class="col-md-6  mr-0 pl-0">
                <h5>
                    <span class="oi oi-briefcase" aria-hidden="true"></span>
                    &nbsp;Permisos
                </h5>
            </div>
            <div class="col-md-6" align="right">
                <h5>
                    <span aria-hidden="true"></span> &nbsp;Fecha: @dateInputValue
                </h5>
            </div>

        </nav>
    }
    else
    {
        <div class="col-lg-12 col-md-12 col-sm-12 col-12" align="center">
            <div>

                <h5>El personal de gestión humana debe asignar un empleado a este usuario</h5>
            </div>
        </div>

    }
    <br />
    <div class="form-row">
        <div class="col-md-9 mb-3" align="right">
            <TextEdit @bind-Text="@customFilterValue" Placeholder="Buscar nombre..." />
        </div>
        <div class="col-md-3 mb-3" align="right">
            <button type="button" class="btn btn-info" style="background-color:#738b95 !important" @onclick="MostrarModal">Crear nuevo solicitud</button>
        </div>
    </div>
    <hr>
    <text>Sin registros...</text>
}
else
{

    @if (UserCreado)
    {
        <nav class="navbar navbar-light bg-light">
            <div class="col-md-6  mr-0 pl-0">
                <h5>
                    <span class="oi oi-briefcase" aria-hidden="true"></span>
                    &nbsp;Permisos
                </h5>
            </div>
            <div class="col-md-6" align="right">
                <h5>
                    <span aria-hidden="true"></span> &nbsp;Fecha: @dateInputValue
                </h5>
            </div>

        </nav>
    }
    else
    {
        <div class="col-lg-12 col-md-12 col-sm-12 col-12" align="center">
            <div>

                <h5>El personal de gestión humana debe asignar un empleado a este usuario</h5>
            </div>
        </div>

    }
    <br />

    <div class="form-row">
        <div class="col-md-9 mb-3" align="right">
            <TextEdit @bind-Text="@customFilterValue" Placeholder="Buscar nombre..." />
        </div>
        <div class="col-md-3 mb-3" align="right">
            <button type="button" class="btn btn-info" style="background-color:#738b95 !important" @onclick="MostrarModal">Crear nuevo solicitud</button>
        </div>
    </div>


    <hr>
    <DataGrid TItem="Solicitud" Data="ListaSolicitudPermisos" CustomFilter="@OnCustomFilter"
              ShowPager="true" PageSize="5" SelectedRowStyling="@OnSelectedRowStyling"
              Striped="true" Responsive="true" Editable="true">


        <ChildContent>

            <DataGridColumn TItem="Solicitud" Field="@nameof(Solicitud.EmpleadoNombre)"
                            Caption="Nombre"></DataGridColumn>
            <DataGridColumn TItem="Solicitud" DisplayFormat="{0:dd/MM/yyyy}" Field="@nameof(Solicitud.FechaInicio)"
                            Caption="Fecha inicio"></DataGridColumn>
            <DataGridColumn TItem="Solicitud" DisplayFormat="{0:dd/MM/yyyy}" Field="@nameof(Solicitud.FechaFin)"
                            Caption="Descripción"></DataGridColumn>
            <DataGridColumn TItem="Solicitud" DisplayFormat="{0:dd/MM/yyyy}" Field="@nameof(Solicitud.Estatus)"
                            Caption="Estatus"></DataGridColumn>
            <DataGridColumn TItem="Solicitud" Field="@nameof(Solicitud.CantidadDias)"
                            Caption="Dias a tomar"></DataGridColumn>



            <DataGridCommandColumn TItem="Solicitud" Caption="Acciones">
                <DeleteCommandTemplate>

                </DeleteCommandTemplate>
                <EditCommandTemplate>

                    @if (context.Item.Estatus == "Generada")
                    {
                        <Button style="color:#ffff;" class="oi oi-pencil btn btn-success"
                                @onclick="@(() => MostrarModalEditar(context.Item))" />
                        <Button style="color:#ffff;" class="oi oi-trash btn btn-danger" title="Eliminar" @onclick="(() => Eliminar(context.Item))" />
                    }
                </EditCommandTemplate>
                <NewCommandTemplate></NewCommandTemplate>
            </DataGridCommandColumn>
        </ChildContent>





        <PreviousPageButtonTemplate>
            <StringEnBotones TipoBoton="atras" />
        </PreviousPageButtonTemplate>
        <NextPageButtonTemplate>
            <StringEnBotones TipoBoton="siguiente" />
        </NextPageButtonTemplate>
        <FirstPageButtonTemplate>
            <StringEnBotones TipoBoton="primero" />
        </FirstPageButtonTemplate>
        <LastPageButtonTemplate>
            <StringEnBotones TipoBoton="ultimo" />
        </LastPageButtonTemplate>



    </DataGrid>

}

<ModalVer @ref="Modal" Titulo="@Titulo" onCancel="OcultarModal">
    <EditForm Model="@SolicitudPermisos">
        <DataAnnotationsValidator />
        <div class="row">
            <div class="col-md-6 mb-3">
                <div class="form-group">
                    <label>Fecha inicio: </label>
                    <div>
                        <input class="form-control" type="date" @bind-value="SolicitudPermisos.FechaInicio" placeholder="Fecha inicio" disabled />
                    </div>
                </div>
            </div>
            <div class="col-md-6 mb-3">
                <div class="form-group">
                    <label>Fecha fin: </label>
                    <div>
                        <input class="form-control" type="date" @bind-value="SolicitudPermisos.FechaFin" placeholder="Fecha Fin" />
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12 mb-3">
                <div class="form-group">
                    <label>Descripción: </label>
                    <div>
                        <input class="form-control" type="text" @bind-value="SolicitudPermisos.Descripcion"
                               placeholder="Descripción" />
                    </div>
                    <ValidationMessage For="@(() => SolicitudPermisos.Descripcion)" />
                </div>
            </div>

        </div>

        <div class="row">
            <div class="col-md-6 mb-3">
                <div class="form-group">
                    <label>Cantidad de dias: </label>
                    @if (SolicitudPermisos.FechaInicio != SolicitudPermisos.FechaFin)
                    {
                        SolicitudPermisos.CantidadDias = 1;
                        cantidaddias = (SolicitudPermisos.FechaFin - SolicitudPermisos.FechaInicio).TotalDays;
                        cantidaddias = cantidaddias + 1;
                        SolicitudPermisos.CantidadDias = SolicitudPermisos.CantidadDias + Convert.ToInt32(cantidaddias);
                    }
                    else
                    {
                        SolicitudPermisos.CantidadDias = 1;
                    }
                    <input class="form-control" type="text" @bind-value="SolicitudPermisos.CantidadDias" disabled />
                </div>
            </div>
            <div class="col-md-6 mb-3">
                <div class="form-group">
                    <label>Estatus: </label>
                    <div>
                        <input class="form-control" type="text" @bind-value="SolicitudPermisos.Estatus" disabled />
                    </div>
                </div>
            </div>
        </div>
        <div class="mb-2 pb-2">
            <button class="btn btn-success" @onclick="(() => Acciones())">@ButtonGuardar</button>
            <button class="btn btn-info" @onclick="(() => OcultarModal())">@ButtonCancelar</button>
        </div>
    </EditForm>
</ModalVer>

<AuthorizeView>
    <Authorized>
        <a hidden href="authentication/profile">Hola, @context.User.Identity.Name</a>
        @if (context.User.Identity.Name != null)
        {
            EmailUsuario = @context.User.Identity.Name;
            IdCreador = @context.User.Claims.First(c => c.Type == "sub").Value;
            NombreUsuario = @context.User.Claims.First(c => c.Type == "FullNameUser").Value;
            //   RolUsuario = @context.User.Claims.First(c => c.Type == "role").Value;

        }

    </Authorized>
</AuthorizeView>

@code {

    ModalVer Modal;
    bool editar = false;
    bool Ver = false;
    public Solicitud SolicitudPermisos { get; set; } = new Solicitud();
    public List<Solicitud> ListaSolicitudPermisos { get; set; } = new List<Solicitud>();
    public List<Solicitud> ListaSolicitudPermisosObtener { get; set; }
    public List<Empleado> ListaEmpleado { get; set; } = new List<Empleado>();
    public Empleado Empleado { get; set; } = new Empleado();
    string NoExiste = "";
    string Titulo;
    string EmailUsuario;
    string IdCreador;
    string NombreUsuario;
    string RolUsuario;
    string NombreMostrar;
    bool UserCreado = false;
    Double cantidaddias;
    string ButtonGuardar = "Guardar";
    string ButtonCancelar = "Cancelar";
    private string dateInputValue;
    string customFilterValue;
    protected override async Task OnInitializedAsync()
    {

        try
        {
            dateInputValue = DateTime.Now.ToString("dd/MM/yyyy");
            ListaEmpleado = await http.GetFromJsonAsync<List<Empleado>>("api/empleados");

            ListaEmpleado = await http.GetFromJsonAsync<List<Empleado>>("api/empleados");

            bool existe = ListaEmpleado.Any(x => x.NombreUsuario == NombreUsuario);
            if (existe)
            {
                UserCreado = true;
                Empleado = ListaEmpleado.First(x => x.NombreUsuario == NombreUsuario);

                ListaSolicitudPermisos = new List<Solicitud>();
                ListaSolicitudPermisosObtener = await http.GetFromJsonAsync<List<Solicitud>>($"api/solicitud/SolicitudPermiso/{Empleado.Id}");
                ListaSolicitudPermisosObtener.ForEach(items =>
                {

                    items.EmpleadoNombre = items.Empleado.Nombre;
                    ListaSolicitudPermisos.Add(items);

                });
            }
            else
            {
                NoExiste = "Noexiste";
            }


        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

    }

    async Task OcultarModal()
    {
        if (editar == true)
        {

            ListaSolicitudPermisos = await http.GetFromJsonAsync<List<Solicitud>>($"api/solicitud/SolicitudPermiso/{Empleado.Id}");
            SolicitudPermisos = ListaSolicitudPermisos.First(x => x.Id.Equals(SolicitudPermisos.Id));
        }


        SolicitudPermisos = new Solicitud();
        Modal.Ocultar();
        await OnInitializedAsync();
    }

    void MostrarModal()
    {
        editar = false;
        Ver = false;
        Titulo = "Crear solicitud permiso";
        SolicitudPermisos = new Solicitud();
        if (SolicitudPermisos.Id == null)
        {
            SolicitudPermisos.Estatus = "Generada";
            SolicitudPermisos.FechaInicio = DateTime.Now;
            SolicitudPermisos.FechaFin = DateTime.Now;

        }
        Modal.Mostrar();


    }
    void MostrarModalEditar(Solicitud solicitud)
    {
        editar = true;
        Titulo = "Editar solicitud permiso";
        Ver = false;
        SolicitudPermisos = solicitud;
        Modal.Mostrar();
    }

    async Task Acciones()
    {

        if (SolicitudPermisos.Id == null)
        {

            if (SolicitudPermisos.FechaFin.Date < SolicitudPermisos.FechaInicio.Date)
            {
                toast.ShowInfo("La fecha de fin no puede ser menor a la fecha de de inicio", "Advertencia");
            }
            else
            {

                SolicitudPermisos.EmpleadoId = Empleado.Id;
                SolicitudPermisos.Estatus = "Generada";
                SolicitudPermisos.Tipo = "Permiso";
                var respuestas = await http.PostAsJsonAsync("api/solicitud", SolicitudPermisos);
                string configuracion = respuestas.StatusCode.ToString();
                if (configuracion.Equals("OK"))
                {
                    toast.ShowSuccess("Se creo correctamente", "Exito");
                    await http.PutAsJsonAsync("api/empleados", Empleado);
                    ListaSolicitudPermisos = await http.GetFromJsonAsync<List<Solicitud>>($"api/solicitud/SolicitudPermiso/{Empleado.Id}");
                    SolicitudPermisos = new Solicitud();
                    Modal.Ocultar();
                }
                else
                {
                    toast.ShowError("Error del sistema", "Exito");
                }



            }


        }
        else
        {
            if (SolicitudPermisos.FechaFin.Date < SolicitudPermisos.FechaInicio.Date)
            {
                toast.ShowInfo("La fecha de fin no puede ser menor a la fecha de de inicio", "Advertencia");
            }
            else
            {
                var repuesta = await http.PutAsJsonAsync("api/solicitud", SolicitudPermisos);
                toast.ShowSuccess("Se actualizo correctamente", "Exito");
                Console.WriteLine("Editar");
                Modal.Ocultar();
            }


        }
        await OnInitializedAsync();
    }
    async Task Eliminar(Solicitud solicitud)
    {
        var result = await js.ConfirmCreateSinAlerta("Aviso", "¿Seguro que quiere eliminar la solicitud?", TipoMensajeSweetAler.warning);
        if (result)
        {
            var respuesta = await http.DeleteAsync($"api/solicitud/{solicitud.Id}");
            string configuracion = respuesta.StatusCode.ToString();

            if (configuracion.Equals("OK"))
            {
                toast.ShowSuccess("Se elimino correctamente", "Exito");
                ListaSolicitudPermisos = await http.GetFromJsonAsync<List<Solicitud>>($"api/solicitud/SolicitudPermiso/{Empleado.Id}");

            }
        }
        await OnInitializedAsync();
    }


    bool OnCustomFilter(Solicitud model)
    {
        if (string.IsNullOrEmpty(customFilterValue))
            return true;

        return
            model.Estatus?.Contains(customFilterValue, StringComparison.OrdinalIgnoreCase) == true
            || model.Empleado.Nombre?.Contains(customFilterValue, StringComparison.OrdinalIgnoreCase) == true;
    }

    void OnSelectedRowStyling(Solicitud solicitud, DataGridRowStyling styling)
    {
        styling.Background = Background.Info;
    }

}
